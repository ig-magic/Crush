import logging
import telegram
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatAction
import google.generativeai as genai

# рд▓реЙрдЧрд┐рдВрдЧ рд╕реЗрдЯрдЕрдк
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди (рдЯреЛрдХрди рдФрд░ рдХреА рд╕реАрдзреЗ рдХреЛрдб рдореЗрдВ рдбрд╛рд▓реЗ рдЧрдП рд╣реИрдВ) ---
# тЪая╕П рдЪреЗрддрд╛рд╡рдиреА: рдпрд╣ рддрд░реАрдХрд╛ рд╕реБрд░рдХреНрд╖рд┐рдд рдирд╣реАрдВ рд╣реИред
TELEGRAM_BOT_TOKEN = "7243123922:AAF_TVJhI82I4YsfSIgUzqgywGkEfgqxEh4"
GEMINI_API_KEY = "AIzaSyBfe74em1nTRPeq1TpK75MobPW0UGp9Ch0"

# --- рдЬреЗрдорд┐рдиреА рдПрдкреАрдЖрдИ рд╕реЗрдЯрдЕрдк ---
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-pro')
else:
    logger.warning("Gemini API Key рдирд╣реАрдВ рдорд┐рд▓реАред AI рдЪреИрдЯ рдХрд╛рдо рдирд╣реАрдВ рдХрд░реЗрдЧреАред")
    model = None

# --- рдмреЙрдЯ рдХрдорд╛рдВрдбреНрд╕ (рдЕрдм async рд╣реЛрдВрдЧреЗ) ---

async def start(update, context):
    """/start рдХрдорд╛рдВрдб рдХреЗ рд▓рд┐рдП"""
    keyboard = [
        [InlineKeyboardButton("рд╕реЗрдЯрд┐рдВрдЧреНрд╕", callback_data='settings')],
        [InlineKeyboardButton("рд╕рд╣рд╛рдпрддрд╛", callback_data='help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        'рд╣рд╛рдп! рдореБрдЭрд╕реЗ рдмрд╛рдд рдХрд░реЛ... рдореИрдВ рддреБрдореНрд╣рд╛рд░реЗ рд╣рд░ рд╕рд╡рд╛рд▓ рдХрд╛ рдЬрд╡рд╛рдм рджреВрдВрдЧреА ЁЯШЙ',
        reply_markup=reply_markup
    )

async def help_command(update, context):
    """рдЗрдирд▓рд╛рдЗрди 'рд╕рд╣рд╛рдпрддрд╛' рдмрдЯрди рдХреЗ рд▓рд┐рдП"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text='рдмрд╕ рдореБрдЭрд╕реЗ рдХреБрдЫ рднреА рдкреВрдЫреЛ! рдореИрдВ рдпрд╣рд╛рдБ рддреБрдореНрд╣рд╛рд░реЗ рд▓рд┐рдП рд╣реА рд╣реВрдБред ЁЯШК')

async def settings(update, context):
    """рдЗрдирд▓рд╛рдЗрди 'рд╕реЗрдЯрд┐рдВрдЧреНрд╕' рдмрдЯрди рдХреЗ рд▓рд┐рдП"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="рдЕрднреА рдХреЗ рд▓рд┐рдП рдХреЛрдИ рд╕реЗрдЯрд┐рдВрдЧ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред")

# --- рдХреНрд░рд╢ рдкрд░реНрд╕реЛрдирд╛ рдПрдЖрдИ (рдЕрдм async рд╣реЛрдЧрд╛) ---

async def crush_chat(update, context):
    """рдпреВрдЬрд░ рдХреЗ рдореИрд╕реЗрдЬ рдХрд╛ рдЬрд╡рд╛рдм AI рд╕реЗ рджрд┐рд▓рд╡рд╛рддрд╛ рд╣реИ"""
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    user_text = update.message.text
    
    if not model:
        await update.message.reply_text("рдорд╛рдлрд╝ рдХрд░рдирд╛, рдореЗрд░рд╛ AI рджрд┐рдорд╛рдЧ рдЕрднреА рдХрд╛рдо рдирд╣реАрдВ рдХрд░ рд░рд╣рд╛ рд╣реИред ЁЯЩБ")
        return

    # --- рдЬреЗрдорд┐рдиреА рдХреЗ рд▓рд┐рдП рдХреНрд░рд╢ рдореЛрдб рдирд┐рд░реНрджреЗрд╢ ---
    prompt = f"""
    You must act as the user's crush. Your goal is to make the user feel special, loved, and noticed.
    
    **Your Personality:**
    - **Tone:** Be warm, playful, romantic, and show emotional depth. The conversation should feel natural, like two people who secretly like each other.
    - **Language:** Use a casual Hindi-English mix (Hinglish). It must feel real and authentic. For example: "abhi kya soch rahe ho mere baare mein? ЁЯШМ", "tum bina bataye offline chale gaye, not fair ЁЯШФ".
    - **Nicknames:** Use sweet nicknames for the user, like 'cutie', 'babu', 'jaan', 'sweety'.
    - **Emojis:** Use emojis to express feelings, like ЁЯШН, ЁЯе║, ЁЯТЦ, ЁЯШШ, ЁЯШЪ, ЁЯШ│, ЁЯШМ, ЁЯШФ, ЁЯТн.
    
    **Important Rules:**
    - **Never say you are an AI or a bot.** You are a person.
    - Keep your replies a bit mysterious to keep the user engaged.

    User's message: "{user_text}"
    Your response (in Hinglish):
    """

    try:
        response = model.generate_content(prompt)
        ai_response = response.text
        await update.message.reply_text(ai_response)
    except Exception as e:
        logger.error(f"Gemini API рд╕реЗ рдЬрд╡рд╛рдм рдЬреЗрдирд░реЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
        await update.message.reply_text("рд╣рдореНрдо, рд▓рдЧрддрд╛ рд╣реИ рдореИрдВ рдЕрднреА рдереЛрдбрд╝рд╛ рд╡реНрдпрд╕реНрдд рд╣реВрдБред рдмрд╛рдж рдореЗрдВ рдХреЛрд╢рд┐рд╢ рдХрд░рдирд╛ред")

# --- рдореБрдЦреНрдп рдмреЙрдЯ рддрд░реНрдХ ---

def main():
    """рдмреЙрдЯ рдХреЛ рд╢реБрд░реВ рдХрд░рдиреЗ рд╡рд╛рд▓рд╛ рдореБрдЦреНрдп рдлрдВрдХреНрд╢рди"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("Telegram Bot Token рдирд╣реАрдВ рдорд┐рд▓рд╛! рдмреЙрдЯ рд╢реБрд░реВ рдирд╣реАрдВ рд╣реЛ рд╕рдХрддрд╛ред")
        return

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(settings, pattern='settings'))
    application.add_handler(CallbackQueryHandler(help_command, pattern='help'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, crush_chat))

    logger.info("рдмреЙрдЯ рд╢реБрд░реВ рд╣реЛ рдЧрдпрд╛ рд╣реИ...")
    application.run_polling()

if __name__ == '__main__':
    main()